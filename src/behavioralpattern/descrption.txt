Behavioral patterns provide solution for the better interaction between objects
and how to provide lose coupling and flexibility to extend easily.

1) Chain of responsibility:

     Chain of responsibility pattern is used to achieve loose coupling in software design
     where a request from the client is passed to a chain of objects to process them.
     Then the object in the chain will decide themselves who will be processing the request
     and whether the request is required to be sent to the next object in the chain or not.

2) Command Pattern

      It is a behavioral design pattern that lets you turn a request into stand-alone object,
      which can be used to parametrize objects with different requests,
      queue or log requests, and support un-doable operations.


3) Iterator Pattern

     Iterator pattern is very commonly used design pattern in Java and .Net programming environment.
     This pattern is used to get a way to access the elements of a collection object in sequential manner
     without any need to know its underlying representation.
     Iterator Pattern we have a lot of examples like List,Array,Map etc

4) Mediator Pattern

     Let's think we have some  object or class and we want those object must have connection between each other.
     so we have n object and the number possible connection will be n(n-1)/2
     so we have 4 object and the possible connection is 4(4-1)/2=6
     so we need to create 6 connection for 4 object. Imagine how hard is to maintenance those connection
     and if we need to change one object we need to make possible also to fix (change in other classes)
     to make more easy and independent each object, we use Mediator Pattern.

     The mediator design pattern is used to provide a centralized communication medium
     between different objects in a system.
     Mediator pattern focuses on to provide a mediator between objects for communication
     and help in implementing lose-coupling between objects.

5) Memento Design Pattern

      Memento (mean  reminder )  is a  behavioral design pattern , Memento is used to keep the state of a class
      and  to restore this object to a previous state.
      As your application is progressing,
      you may want to save checkpoints in your application and restore back to those checkpoints later.

      Example we are working in NotePad and we want to back use CTRL+Z  to back in previous state.

      Memento has 3 part
      originator : ==>  the object for which the state is to be saved. It creates the memento and uses it in future to undo.
      memento : ==>  the object that is going to maintain the state of originator. Its just a POJO.
      caretaker : ==>  the object that keeps track of multiple memento. Like maintaining savepoint.






